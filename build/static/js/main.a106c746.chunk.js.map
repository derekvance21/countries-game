{"version":3,"sources":["utils/loadCountries.js","utils/trie.js","components/map.js","components/timer.js","App.js","reportWebVitals.js","index.js"],"names":["Trie","require","countries","countriesTrie","forEach","country","index","insert","name","alias","module","exports","allCountries","_","this","id","children","key","char","slice","toLowerCase","undefined","nodeAt","detailed","queue","value","res","curr","shift","forIn","node","push","length","console","log","getMap","fetch","headers","Accept","then","response","json","bb","projection","d3","fitSize","geoGenerator","append","style","width","height","selectAll","data","features","join","attr","d","properties","iso_a3","kebabCase","continent","classed","Timer","props","seconds","useState","minutes","secondsLeft","setSecondsLeft","useEffect","tick","setInterval","prevValue","clearInterval","onGameOver","Math","floor","currentNode","namedCountriesArray","Array","fill","App","inputText","setInputText","countriesNamed","setCountriesNamed","gameState","setGameState","className","type","onChange","e","code","input","target","charAt","display","onClick","map","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a106c746.chunk.js","sourcesContent":["const Trie = require(\"./trie.js\");\r\nconst countries = require(\"../data/countries.json\");\r\n\r\nlet countriesTrie = new Trie();\r\n\r\ncountries.forEach((country, index) => {\r\n  countriesTrie.insert(country.name, index);\r\n  if (country.alias) {\r\n    countriesTrie.insert(country.alias, index);\r\n  }\r\n});\r\n\r\nmodule.exports = {\r\n  countriesTrie: countriesTrie,\r\n  allCountries: countries,\r\n};\r\n","var _ = require(\"lodash\");\r\n\r\nclass Trie {\r\n  constructor() {\r\n    this.id = null;\r\n    this.children = {};\r\n  }\r\n\r\n  insert(key, id) {\r\n    // base case: If we're at the end of key, store the id in this node\r\n    if (key === \"\") {\r\n      this.id = id;\r\n    }\r\n    // if we're not at the end of key\r\n    else {\r\n      const char = key.slice(0, 1).toLowerCase();\r\n      // if the current node doesn't have a child for the key's first character\r\n      if (this.children[char] === undefined) {\r\n        // then create a blank node\r\n        this.children[char] = new Trie();\r\n      }\r\n      // continue recursively traversing/inserting nodes\r\n      this.children[char].insert(key.slice(1), id);\r\n    }\r\n  }\r\n\r\n  nodeAt(key) {\r\n    if (key) {\r\n      const char = key.slice(0, 1).toLowerCase();\r\n      if (this.children[char]) {\r\n        return this.children[char].nodeAt(key.slice(1).toLowerCase());\r\n      }\r\n    } else {\r\n      return this;\r\n    }\r\n  }\r\n\r\n  // BFS print function\r\n  // ==== represents a node with no children\r\n  print(detailed = false) {\r\n    let queue = [{ ...this, value: \"\" }];\r\n    let res = \"\";\r\n    while (queue.length) {\r\n      const curr = queue.shift();\r\n      if (detailed || curr.id) {\r\n        // might need to be curr.id !== null\r\n        res += `${curr.value}: ${curr.id}\\n`;\r\n      }\r\n      _.forIn(curr.children, (node, char) => {\r\n        queue.push({ ...node, value: curr.value + char });\r\n      });\r\n    }\r\n    console.log(res);\r\n  }\r\n}\r\n\r\n// console.log(JSON.stringify(countries));\r\n\r\nmodule.exports = Trie;\r\n","import * as d3 from \"d3\";\r\nvar _ = require(\"lodash\");\r\n\r\nconst getMap = () => {\r\n  fetch(\"custom.geo.json\", {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  })\r\n    .then((response) => response.json())\r\n    .then((bb) => {\r\n      let width = 1000;\r\n      let height = 500;\r\n      let projection = d3.geoEqualEarth();\r\n      projection.fitSize([width, height], bb);\r\n      let geoGenerator = d3.geoPath().projection(projection);\r\n\r\n      let svg = d3\r\n        .select(\"#map\")\r\n        .append(\"svg\")\r\n        .style(\"width\", width + \"px\")\r\n        .style(\"height\", height + \"px\");\r\n\r\n      svg\r\n        .append(\"g\")\r\n        .selectAll(\"path\")\r\n        .data(bb.features)\r\n        .join(\"path\")\r\n        .attr(\"id\", function (d) {\r\n          return d.properties.iso_a3;\r\n        })\r\n        .attr(\"class\", function (d) {\r\n          return _.kebabCase(d.properties.continent);\r\n        })\r\n        .classed(\"no-fill\", true)\r\n        .attr(\"d\", geoGenerator)\r\n        .attr(\"fill\", \"#fff\")\r\n        .attr(\"stroke\", \"#666\");\r\n    });\r\n};\r\n\r\nconst colorCountry = function (code) {\r\n  d3.select(`#${code}`).classed(\"no-fill\", false);\r\n};\r\n\r\nconst clearColors = function () {\r\n  d3.selectAll(\"#map svg g path\").classed(\"no-fill\", true);\r\n};\r\n\r\nexport default getMap;\r\nexport { colorCountry, clearColors };\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst minutes = 15;\r\n\r\nfunction twoDigitSeconds(seconds) {\r\n  if (seconds < 10) {\r\n    return `0${seconds}`;\r\n  } else {\r\n    return seconds;\r\n  }\r\n}\r\n\r\nexport default function Timer(props) {\r\n  // const [isActive, setIsActive] = useState(true);\r\n  const [secondsLeft, setSecondsLeft] = useState(minutes * 60);\r\n\r\n  useEffect(() => {\r\n    if (secondsLeft === 0) {\r\n      // setIsActive(false);\r\n      props.onGameOver();\r\n    } else {\r\n      const tick = setInterval(function () {\r\n        setSecondsLeft((prevValue) => prevValue - 1);\r\n      }, 1000);\r\n      return () => clearInterval(tick);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>{`${Math.floor(secondsLeft / 60)}:${twoDigitSeconds(\r\n        secondsLeft % 60\r\n      )}`}</p>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { countriesTrie, allCountries } from \"./utils/loadCountries.js\";\nimport getMap, { colorCountry, clearColors } from \"./components/map.js\";\nimport Timer from \"./components/timer.js\";\n\nlet currentNode = countriesTrie;\nlet namedCountriesArray = new Array(allCountries.length).fill(0);\n\ngetMap();\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [countriesNamed, setCountriesNamed] = useState(0);\n  const [gameState, setGameState] = useState(\"ready\");\n\n  function onInputChange(e) {\n    const input = e.target.value;\n    // backspace was pressed (onChange React event issue)\n    if (input.length < inputText.length) {\n      currentNode = countriesTrie.nodeAt(input);\n    } else {\n      const char = input.charAt(input.length - 1).toLowerCase();\n\n      if (currentNode) {\n        currentNode = currentNode.children[char];\n        if (\n          currentNode &&\n          currentNode.id !== null &&\n          namedCountriesArray[currentNode.id] === 0\n        ) {\n          namedCountriesArray[currentNode.id] = 1;\n          setCountriesNamed((prevValue) => prevValue + 1);\n          if (countriesNamed === allCountries.length) {\n            setGameState(\"gameover\");\n          }\n          colorCountry(allCountries[currentNode.id].code);\n          setInputText(\"\");\n          currentNode = countriesTrie;\n          return;\n        }\n      }\n    }\n    setInputText(input);\n  }\n\n  function onGameStart() {\n    setGameState(\"playing\");\n    setInputText(\"\");\n    setCountriesNamed(0);\n    clearColors();\n  }\n\n  function onGameOver() {\n    setGameState(\"gameover\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {gameState === \"playing\" ? (\n          <Timer onGameOver={onGameOver} />\n        ) : (\n          <p>15:00</p>\n        )}\n        {gameState === \"ready\" ? (\n          <p>Name all 197 countries before time runs out!</p>\n        ) : (\n          <p>\n            {countriesNamed}/{allCountries.length}\n          </p>\n        )}\n        <div>\n          {gameState === \"playing\" && (\n            <input\n              type=\"text\"\n              id=\"countryInput\"\n              value={inputText}\n              onChange={onInputChange}\n              style={{ display: \"inline-block\" }}\n            ></input>\n          )}\n          {gameState === \"playing\" ? (\n            <button style={{ display: \"inline-block\" }} onClick={onGameOver}>\n              Give Up\n            </button>\n          ) : (\n            <button onClick={onGameStart}>Start Game!</button>\n          )}\n        </div>\n        <div id=\"map\"></div>\n        {gameState === \"gameover\" &&\n          namedCountriesArray.map((value, index) => {\n            return (\n              <span key={index} style={{ color: value === 0 ? \"red\" : \"lime\" }}>\n                {allCountries[index].name}\n              </span>\n            );\n          })}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}